diff --git a/PicatchUsFB/www/js/services/EventsFactory.js b/PicatchUsFB/www/js/services/EventsFactory.js
index 82d8d44..220921c 100644
--- a/PicatchUsFB/www/js/services/EventsFactory.js
+++ b/PicatchUsFB/www/js/services/EventsFactory.js
@@ -1,27 +1,25 @@
-service.factory('EventsFactory', function (ngFB, $q, PhotoFactory){
+service.factory('EventsFactory', function (ngFB, $q, PhotoFactory, UserFactory){
 	var now = moment();
 
 	var factory = {};
 	factory.events = false;
 	var events_photos_already_loaded = [];
+	var nbAppels = 0;
 
 	factory.getEvents = function (refresh){
         refresh == undefined ? refresh = false : refresh;
 
 		var deffered = $q.defer();
 		if(factory.events !== false && refresh == false){
-			console.log("Je suis dans le getEvents");
-			console.log(factory.events);
 			deffered.resolve(factory.events);
 		}
 		else{
 			events_photos_already_loaded = []; //When we refresh events, we reset photos loaded. Otherwise, it creates a bug and photos are not loaded
-			console.log("3- Je suis dans le getEvents pour refresh");
-			console.log(events_photos_already_loaded);
-			ngFB.api({path: '/me/events', params: {fields: 'name,id,attending_count,start_time,end_time, photos.limit(5000){id, created_time, name, from{id, name, picture}, images}'}}).then(
+			ngFB.api({path: '/me/events', params: {fields: 'name,id,attending_count,start_time,end_time, photos.limit(5000){id, created_time, name, from{id, name, picture}, images, likes.limit(5000)}'}}).then(
              function(events) {
              	factory.events = events.data;
-
+             	nbAppels++;
+             	console.log('nombre dappels serveur : ' + nbAppels);
              	angular.forEach(factory.events, function(event){
              		var start_time = moment(event.start_time);
                     event.start_time = start_time;
@@ -42,7 +40,6 @@ service.factory('EventsFactory', function (ngFB, $q, PhotoFactory){
                     	event.total_photos = 0;
 
              	});
-             	console.log(factory.events);
              	deffered.resolve(factory.events);
             }, function(){
             	deffered.reject("Erreur de connexion rÃ©seau");
@@ -67,7 +64,6 @@ service.factory('EventsFactory', function (ngFB, $q, PhotoFactory){
 			})
 
 	    }else {
-	    	console.log("Je suis dans le getEvent");
 	    	angular.forEach(factory.events, function(event){
 		    	if(event.id === id){
 					e = event;	
@@ -84,32 +80,35 @@ service.factory('EventsFactory', function (ngFB, $q, PhotoFactory){
 
 	factory.getEventPhotos = function(id, refresh) {
 		refresh == undefined ? refresh = false : refresh;
-		console.log("Je suis dans le getEventPhotos");
-		console.log(refresh);
-		console.log("4- Je suis dans le getEventPhotos pour refresh");
-		console.log(events_photos_already_loaded);
+
 		var deffered = $q.defer();
 		if(events_photos_already_loaded.indexOf(id) > -1 && refresh == false){ //photos of id event have been already loaded
-			console.log(events_photos_already_loaded);
 			factory.getEvent(id).then(function(event){
-				console.log("Je suis dans la factory sans refresh");
 				factory.photos = event.photos.data;
 				deffered.resolve(factory.photos);
 			})
 		}
 		else{ //Otherwise, photos have never been loaded or events have been refreshed
-			console.log("Je viens de refresh dans le getEventPhotos");
 			factory.getEvent(id, refresh).then(function(event){
 				factory.photos = event.photos.data;
 				var i = 0;
 					angular.forEach(factory.photos, function(photo){
-						ngFB.api({path: '/' + photo.id + '/likes', params: {summary : 'total_count,can_like,has_liked'}}).then(
-					        function(likes) {
-					            photo.total_likes = likes.summary.total_count;
-					            photo.has_liked = likes.summary.has_liked;
-					        },
-					        function(){
-					        });
+						if(photo.likes == undefined)
+							photo.total_likes = 0;
+						else
+							photo.total_likes = photo.likes.data.length;
+
+						if(photo.total_likes != 0){
+							var has_liked = false;
+							var j = 0;
+							while(j < photo.total_likes && !has_liked){
+								if(photo.likes.data[j].id == UserFactory.getId())
+									has_liked = true;
+								j++;
+							}
+							photo.has_liked = has_liked;
+						}
+
 						photo.pos = i;
 						photo.time_ago = moment(photo.created_time).fromNow();
 						photo.src = photo.images[photo.images.length - 1].source; //We keep the smaller photo for the grid
@@ -133,8 +132,6 @@ service.factory('EventsFactory', function (ngFB, $q, PhotoFactory){
 		var deffered = $q.defer();
 
 		var livePhotos = [];
-		console.log("1- Je suis dans le getPhotosLiveEvents pour refresh");
-		console.log(events_photos_already_loaded);
 		factory.getLiveEvents(refresh).then(function(liveEvents){
 			angular.forEach(liveEvents, function(event){
 				
@@ -159,8 +156,6 @@ service.factory('EventsFactory', function (ngFB, $q, PhotoFactory){
 	factory.getLiveEvents = function (refresh){
 		var deffered = $q.defer();
 		var liveEvents = [];
-		console.log("2- Je suis dans le getLiveEvents pour refresh");
-		console.log(events_photos_already_loaded);
 		factory.getEvents(refresh).then(function(events){
 			angular.forEach(events, function(event){
 	            if(moment(now).isBetween(event.start_time, event.end_time)){
